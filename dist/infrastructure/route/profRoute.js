"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const professionalController_1 = __importDefault(require("../../adaptors/controllers/professionalController"));
const profUsecase_1 = __importDefault(require("../../use_case/profUsecase"));
const profRepository_1 = __importDefault(require("../repository/profRepository"));
const otpGenerator_1 = __importDefault(require("../utils/otpGenerator"));
const sendMail_1 = __importDefault(require("../utils/sendMail"));
const hashPassword_1 = __importDefault(require("../utils/hashPassword"));
const jwt_1 = __importDefault(require("../utils/jwt"));
const cloudinary_1 = __importDefault(require("../utils/cloudinary"));
const profAuth_1 = __importDefault(require("../middleware/profAuth"));
const postController_1 = __importDefault(require("../../adaptors/controllers/postController"));
const postUsecase_1 = __importDefault(require("../../use_case/postUsecase"));
const postRepository_1 = __importDefault(require("../repository/postRepository"));
const notificationRepository_1 = __importDefault(require("../repository/notificationRepository"));
const notificationUsecase_1 = __importDefault(require("../../use_case/notificationUsecase"));
const notificationController_1 = __importDefault(require("../../adaptors/controllers/notificationController"));
const requirementController_1 = __importDefault(require("../../adaptors/controllers/requirementController"));
const requirementUsecase_1 = __importDefault(require("../../use_case/requirementUsecase"));
const requirementRepository_1 = __importDefault(require("../repository/requirementRepository"));
const stripe_1 = __importDefault(require("../utils/stripe"));
const jwt = new jwt_1.default();
const hash = new hashPassword_1.default();
const sendMail = new sendMail_1.default();
const otp = new otpGenerator_1.default();
const repository = new profRepository_1.default();
const cloudinary = new cloudinary_1.default();
const stripe = new stripe_1.default();
const multer_1 = require("../middleware/multer");
const useCase = new profUsecase_1.default(repository, otp, sendMail, hash, jwt, cloudinary, stripe);
const controller = new professionalController_1.default(useCase);
const postRepository = new postRepository_1.default();
const postUsecase = new postUsecase_1.default(cloudinary, postRepository);
const postController = new postController_1.default(postUsecase);
const notificationRepository = new notificationRepository_1.default();
const notificationUsecase = new notificationUsecase_1.default(notificationRepository);
const notificationController = new notificationController_1.default(notificationUsecase);
const reqRepository = new requirementRepository_1.default();
const reqUsecase = new requirementUsecase_1.default(reqRepository);
const reqController = new requirementController_1.default(reqUsecase);
const router = express_1.default.Router();
router.post('/signup', (req, res) => controller.signup(req, res));
router.post('/verifyotp', (req, res) => controller.verifyOTP(req, res));
router.post('/fillProfile', multer_1.uploadFile.single('image'), (req, res) => controller.fillProfile(req, res));
router.post('/gsignup', (req, res) => controller.gsignup(req, res));
router.post('/login', (req, res) => controller.login(req, res));
router.get('/profile', profAuth_1.default, (req, res) => controller.getProfile(req, res));
router.patch('/editProfile', profAuth_1.default, (req, res) => controller.editProfile(req, res));
router.patch('/editImage', profAuth_1.default, multer_1.uploadFile.single('image'), (req, res) => controller.editImage(req, res));
router.post('/editEmail', profAuth_1.default, (req, res) => controller.editEmail(req, res));
router.put('/verifyEmailOtp', profAuth_1.default, (req, res) => controller.changeEmail_Otp(req, res));
router.patch('/editPassword', profAuth_1.default, (req, res) => controller.editPassword(req, res));
router.get('/professionals', profAuth_1.default, (req, res) => controller.getProfessionals(req, res));
router.get('/profDetails/:id', (req, res) => controller.getAProfessional(req, res));
router.patch('/savePost/:id/:save', profAuth_1.default, (req, res) => controller.savePost(req, res));
router.post('/subscribe/:plan', profAuth_1.default, (req, res) => controller.subscribe(req, res));
router.delete('/cancelSubscription', profAuth_1.default, (req, res) => controller.cancelSubscription(req, res));
router.post('/forgotPassword', (req, res) => controller.forgotPassword(req, res));
router.post('/verifyOtpForgotPassword', (req, res) => controller.verifyOtpForgotPassword(req, res));
router.post('/changePassword', (req, res) => controller.changePassword(req, res));
router.post('/resendOtp', (req, res) => controller.resendOtp(req, res));
router.get('/logout', (req, res) => controller.logout(req, res));
router.post('/createPost', profAuth_1.default, multer_1.uploadFile.single('image'), (req, res) => postController.createPost(req, res));
router.get('/getPosts', profAuth_1.default, (req, res) => postController.getPost(req, res));
router.get('/designs/:category', (req, res) => postController.getDesigns(req, res));
router.get('/allDesigns', (req, res) => postController.getAllPosts(req, res));
router.get('/portraits', profAuth_1.default, (req, res) => postController.getPortraits(req, res));
router.get('/postsById/:id', (req, res) => postController.getPostsById(req, res));
router.put('/like/:id', profAuth_1.default, (req, res) => postController.likeByProf(req, res));
router.put('/unlike/:id', profAuth_1.default, (req, res) => postController.unlikeByProf(req, res));
router.put('/postComment', profAuth_1.default, (req, res) => postController.addCommentbyProf(req, res));
router.delete('/deletePost/:id', profAuth_1.default, (req, res) => postController.deletePost(req, res));
router.get('/notifications', profAuth_1.default, (req, res) => notificationController.getNotifications(req, res));
router.patch('/updateNotification/:id', profAuth_1.default, (req, res) => notificationController.updateNotification(req, res));
router.get('/requirements', profAuth_1.default, (req, res) => reqController.getRequirementsByService(req, res));
router.post('/webhook', (req, res) => controller.webhook(req, res));
exports.default = router;
