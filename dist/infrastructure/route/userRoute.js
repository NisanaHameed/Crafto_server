"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = __importDefault(require("../../adaptors/controllers/userController"));
const userUsecase_1 = __importDefault(require("../../use_case/userUsecase"));
const userRepository_1 = __importDefault(require("../repository/userRepository"));
const otpGenerator_1 = __importDefault(require("../utils/otpGenerator"));
const sendMail_1 = __importDefault(require("../utils/sendMail"));
const hashPassword_1 = __importDefault(require("../utils/hashPassword"));
const jwt_1 = __importDefault(require("../utils/jwt"));
const userAuth_1 = __importDefault(require("../middleware/userAuth"));
const multer_1 = require("../middleware/multer");
const cloudinary_1 = __importDefault(require("../utils/cloudinary"));
const postController_1 = __importDefault(require("../../adaptors/controllers/postController"));
const postRepository_1 = __importDefault(require("../repository/postRepository"));
const postUsecase_1 = __importDefault(require("../../use_case/postUsecase"));
const requirementController_1 = __importDefault(require("../../adaptors/controllers/requirementController"));
const requirementUsecase_1 = __importDefault(require("../../use_case/requirementUsecase"));
const requirementRepository_1 = __importDefault(require("../repository/requirementRepository"));
const conversationRepository_1 = __importDefault(require("../repository/conversationRepository"));
const repository = new userRepository_1.default();
const otp = new otpGenerator_1.default();
const sendOtp = new sendMail_1.default();
const hash = new hashPassword_1.default();
const jwt = new jwt_1.default();
const cloudinary = new cloudinary_1.default();
const conversation = new conversationRepository_1.default();
const useCase = new userUsecase_1.default(repository, otp, sendOtp, hash, jwt, cloudinary, conversation);
const controller = new userController_1.default(useCase);
const postRepository = new postRepository_1.default();
const postUsecase = new postUsecase_1.default(cloudinary, postRepository);
const postController = new postController_1.default(postUsecase);
const reqRepository = new requirementRepository_1.default();
const reqUsecase = new requirementUsecase_1.default(reqRepository);
const reqController = new requirementController_1.default(reqUsecase);
const router = express_1.default.Router();
router.post('/signup', (req, res) => controller.signup(req, res));
router.post('/verifyotp', (req, res) => controller.verifyOTP(req, res));
router.post('/login', (req, res) => controller.login(req, res));
router.post('/gsignup', (req, res) => controller.gsignup(req, res));
router.get('/profile', userAuth_1.default, (req, res) => controller.getProfile(req, res));
router.patch('/editProfile', userAuth_1.default, multer_1.uploadFile.single('image'), (req, res) => controller.editProfile(req, res));
router.post('/follow', userAuth_1.default, (req, res) => controller.followProfessional(req, res));
router.post('/unfollow', userAuth_1.default, (req, res) => controller.unfollowProfessional(req, res));
router.patch('/savePost/:id/:save', userAuth_1.default, (req, res) => controller.savePost(req, res));
router.post('/forgotPassword', (req, res) => controller.forgotPassword(req, res));
router.post('/verifyOtpForgotPassword', (req, res) => controller.verifyOtpForgotPassword(req, res));
router.post('/changePassword', (req, res) => controller.changePassword(req, res));
router.post('/resendOtp', (req, res) => controller.resendOtp(req, res));
router.get('/logout', (req, res) => controller.logout(req, res));
router.get('/designs/:category', (req, res) => postController.getDesigns(req, res));
router.get('/allDesigns', (req, res) => postController.getAllPosts(req, res));
router.get('/postsById/:id', (req, res) => postController.getPostsById(req, res));
router.put('/like/:id', userAuth_1.default, (req, res) => postController.likeByUSer(req, res));
router.put('/unlike/:id', userAuth_1.default, (req, res) => postController.unlikeByUser(req, res));
router.get('/postDetails/:id', (req, res) => postController.getAPostById(req, res));
router.put('/postComment', userAuth_1.default, (req, res) => postController.addCommentbyUser(req, res));
router.get('/searchDesign', (req, res) => postController.searchDesigns(req, res));
router.post('/postRequirement', userAuth_1.default, (req, res) => reqController.saveRequirement(req, res));
router.get('/requirements', userAuth_1.default, (req, res) => reqController.getRequirements(req, res));
router.put('/updateReq', userAuth_1.default, (req, res) => reqController.updateRequirement(req, res));
router.get('/conversations', userAuth_1.default, (req, res) => controller.getConversations(req, res));
exports.default = router;
